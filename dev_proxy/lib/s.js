
            
                    let bytes;
                    const base64 = "";
//                     if (typeof Buffer === 'undefined') {
//                         bytes = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
//                     } else {
//                         bytes = Buffer.from(base64, 'base64');
//                     }
                    
//             export const booted = 
//             WebAssembly.instantiate(bytes,{  })
//                 .then(obj => {
//                     const wasm = obj.instance;
//                     memory = wasm.exports.memory;
// sign = wasm.exports.sign;
// __wbindgen_add_to_stack_pointer = wasm.exports.__wbindgen_add_to_stack_pointer;
// __wbindgen_malloc = wasm.exports.__wbindgen_malloc;
// __wbindgen_realloc = wasm.exports.__wbindgen_realloc;
// __wbindgen_free = wasm.exports.__wbindgen_free;

//                 })
//             ;
//             export let memory;
// export let sign;
// export let __wbindgen_add_to_stack_pointer;
// export let __wbindgen_malloc;
// export let __wbindgen_realloc;
// export let __wbindgen_free;

if (typeof Buffer === 'undefined') {
    bytes = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
} else {
    bytes = Buffer.from(base64, 'base64');
}

// Variables to hold WASM exports, will be populated by the booted promise
let wasm;
let signWrapper; // The JS wrapper function we will export

export const booted =
    WebAssembly.instantiate(bytes, { /* imports object if needed */ })
        .then(obj => {
            wasm = obj.instance.exports; // Assign exports to wasm variable

            // --- Start: Helper functions and caches copied from sign.mjs ---
            let WASM_VECTOR_LEN = 0;
            let cachedUint8Memory0 = null;

            function getUint8Memory0() {
                if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
                    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
                }
                return cachedUint8Memory0;
            }

            const cachedTextEncoder =
                typeof TextEncoder !== 'undefined' ?
                    new TextEncoder('utf-8') : {
                        encode: () => {
                            throw Error('TextEncoder not available');
                        },
                    };

            const encodeString =
                typeof cachedTextEncoder.encodeInto === 'function' ?
                    function (arg, view) {
                        return cachedTextEncoder.encodeInto(arg, view);
                    } :
                    function (arg, view) {
                        const buf = cachedTextEncoder.encode(arg);
                        view.set(buf);
                        return {
                            read: arg.length,
                            written: buf.length,
                        };
                    };

            function passStringToWasm0(arg, malloc, realloc) {
                if (realloc === undefined) {
                    const buf = cachedTextEncoder.encode(arg);
                    const ptr = malloc(buf.length, 1) >>> 0;
                    getUint8Memory0()
                        .subarray(ptr, ptr + buf.length)
                        .set(buf);
                    WASM_VECTOR_LEN = buf.length;
                    return ptr;
                }

                let len = arg.length;
                let ptr = malloc(len, 1) >>> 0;

                const mem = getUint8Memory0();

                let offset = 0;

                for (; offset < len; offset++) {
                    const code = arg.charCodeAt(offset);
                    if (code > 0x7f) break;
                    mem[ptr + offset] = code;
                }

                if (offset !== len) {
                    if (offset !== 0) {
                        arg = arg.slice(offset);
                    }
                    ptr = realloc(ptr, len, (len = offset + arg.length * 3), 1) >>> 0;
                    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
                    const ret = encodeString(arg, view);

                    offset += ret.written;
                }

                WASM_VECTOR_LEN = offset;
                return ptr;
            }

            let cachedInt32Memory0 = null;

            function getInt32Memory0() {
                if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
                    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
                }
                return cachedInt32Memory0;
            }

            const cachedTextDecoder =
                typeof TextDecoder !== 'undefined' ?
                    new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : {
                        decode: () => {
                            throw Error('TextDecoder not available');
                        },
                    };

            if (typeof TextDecoder !== 'undefined') {
                cachedTextDecoder.decode();
            }

            function getStringFromWasm0(ptr, len) {
                ptr = ptr >>> 0;
                return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
            }
            // --- End: Helper functions and caches copied from sign.mjs ---

            // --- Define the JavaScript wrapper for the sign function ---
            signWrapper = (nonce, timestamp, device_id, query) => {
                if (!wasm) {
                    throw new Error("WASM module not initialized yet.");
                }
                let deferred5_0;
                let deferred5_1;
                try {
                    // Get necessary functions from wasm exports
                    const malloc = wasm.__wbindgen_malloc;
                    const realloc = wasm.__wbindgen_realloc;
                    // const free = wasm.__wbindgen_free;
                    const rawSign = wasm.sign; // The actual WASM function
                    const addToStackPointer = wasm.__wbindgen_add_to_stack_pointer;

                    const retptr = addToStackPointer(-16);

                    const ptr0 = passStringToWasm0(nonce, malloc, realloc);
                    const len0 = WASM_VECTOR_LEN;

                    const ptr1 = passStringToWasm0(timestamp, malloc, realloc);
                    const len1 = WASM_VECTOR_LEN;

                    const ptr2 = passStringToWasm0(device_id, malloc, realloc);
                    const len2 = WASM_VECTOR_LEN;

                    const ptr3 = passStringToWasm0(query, malloc, realloc);
                    const len3 = WASM_VECTOR_LEN;

                    // Call the raw WASM sign function with pointers and lengths
                    rawSign(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);

                    var r0 = getInt32Memory0()[retptr / 4 + 0];
                    var r1 = getInt32Memory0()[retptr / 4 + 1];

                    // Store values to free later
                    deferred5_0 = r0;
                    deferred5_1 = r1;

                    // Decode the result string
                    return getStringFromWasm0(r0, r1);
                } finally {
                    // Clean up stack and free memory
                    if (wasm && wasm.__wbindgen_add_to_stack_pointer) {
                        wasm.__wbindgen_add_to_stack_pointer(16);
                    }
                    if (wasm && wasm.__wbindgen_free && deferred5_0 !== undefined) {
                        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);
                    }
                }
            };

            // Optional: Log success
            console.log("s.js: WASM instantiated and sign wrapper created.");
        })
        .catch(error => {
            console.error("s.js: Failed to instantiate WASM:", error);
            // Propagate the error so consumers of 'booted' know it failed
            throw error;
        });

// Export the signWrapper after the promise resolves and populates it
// We export a function that calls the wrapper, ensuring it exists first.
export function sign(nonce, timestamp, device_id, query) {
    if (!signWrapper) {
        throw new Error("sign function called before WASM initialization completed via booted promise.");
    }
    return signWrapper(nonce, timestamp, device_id, query);
}

// Note: We are no longer exporting memory, __wbindgen_malloc, etc., directly,
// as the wrapper handles their usage internally. Only 'booted' and the wrapped 'sign' are needed externally.
// If other raw WASM functions were needed externally, they'd need similar wrappers or direct export.